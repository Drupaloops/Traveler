<script src="https://unpkg.com/jquery@3.1.0/dist/jquery.min.js"></script>
<script src="https://unpkg.com/remarkable@1.7.1/dist/remarkable.min.js"></script>
<div id="content"></div>
<script type="text/babel">
    var data = [
        {id: 1, author: "Pete Hunt", text: "This is one comment"},
        {id: 2, author: "Jordan Walke", text: "This is *another* comment"},
        {id: 3, author: "Oops Du", text: "This is *another* comment"}
    ];
    class CommentList extends React.Component {
        constructor(props) {
            super(props);
        }
        render() {
            var commentNodes = this.props.data.map(function(comment) {
                return (
                    <Comment author={comment.author} key={comment.id}>
                        {comment.text}
                    </Comment>
                );
            });
            return (
                <div className="commentList">
                    {commentNodes}
                </div>
            );
        }
    }

    class CommentForm extends React.Component {
        constructor(props) {
            super(props);
        }
        render() {
            var md = new Remarkable();
            return (
                    <div className="comment">
                        <h2 className="commentAuthor">
                            {this.props.author}
                        </h2>
                        {md.render(this.props.children)}
                    </div>
            );
        }
    }
    class CommentBox extends React.Component {
        constructor(props) {
            super(props);
        }
        getInitialState() {
            return {data: []};
        }
        componentDidMount() {
            $.ajax({
                url: this.props.url,
                dataType: 'json',
                cache: false,
                success: function(data) {
                    this.setState({data: data});
                }.bind(this),
                error: function(xhr, status, err) {
                    console.error(this.props.url, status, err.toString());
                }.bind(this)
            });
        }
        render() {
            return (
                    <div className="CommentBox">
                        <h1>Oops</h1>
                        <CommentList data={this.props.data} />
                        <CommentForm />
                    </div>
            );
        }
    }
    class Comment extends React.Component {
        constructor(props) {
            super(props);
        }
        rawMarkup() {
            var md = new Remarkable();
            var rawMarkup = md.render(this.props.children.toString());
            return { __html: rawMarkup };
        }
        render() {
            return (
                <div className="comment">
                    <h2 className="commentAuthor">{this.props.author}</h2>
                    <span dangerouslySetInnerHTML={this.rawMarkup()} />
                </div>
            );
        }
    }
    ReactDOM.render(
            <CommentBox data={data} />,
            document.getElementById('content')
    );
</script>
